;ASSEMBLER DIRECTIVES
        $NOMOD51
        $INCLUDE(REG552.INC)
        
        NAME    TEMPLATE_CODE

         ;EXTERNAL REFERENCES
;        $INCLUDE(I2C.LIB)
;        EXTERN  DATA (TEST)
;        EXTRN   CODE (I2C_IO_WRITE)
;        EXTRN   CODE (I2C_IO_READ)
;        EXTRN   CODE (I2C_IO_INIT)

        USING_8052 SET  1
        PUBLIC  USING_8052

;ALIASES FOR REGISTERS

        SBUF EQU S0BUF
        SCON EQU S0CON
        IE   EQU IEN0
        IP   EQU IP0      

;TEMPLATE MACROS
        M_FILL_RAM_WITH_ACC MACRO 
        MOV     R0,#0FFH
        MOV     @R0,A
        DJNZ    R0,$-1
        MOV     00H,A
        ENDM

;DEFINE SEGMENTS ACROSS DIFFERENT MEMORY SPACES

;VARIABLES FOR XDATA MEMORY SPACE
        XDATA_SEG SEGMENT XDATA
        RSEG    XDATA_SEG
        PUBLIC  X_VAR   ;if used outside template
        X_VAR:	DS	1
        
;VARIABLES FOR DATA MEMORY SPACE
        DATA_SEG SEGMENT DATA		
        RSEG    DATA_SEG
        PUBLIC  D_VAR
        D_VAR:	DS	1
				
;VARIABLES FOR BITADDRESSABLE MEMORY SPACE
        BDATA_SEG SEGMENT DATA BITADDRESSABLE
        RSEG    BDATA_SEG
BADDR_VAR:	DS	1		
	_A      BIT     BADDR_VAR.0
	_B	BIT	BADDR_VAR.1
	_C	BIT	BADDR_VAR.2
	_D	BIT	BADDR_VAR.3
	_E	BIT	BADDR_VAR.4
	_F	BIT	BADDR_VAR.5
	_G	BIT	BADDR_VAR.6
	_H	BIT	BADDR_VAR.7
				
;VARIABLES FOR IDATA SPACE
        IDATA_SEG SEGMENT IDATA 
        RSEG	IDATA_SEG
I_VAR:	DS	1

;VARIABLES FOR BIT MEMORY SPACE. SAME SPACE AS BITADDRESSABLE
        BIT_SEG	SEGMENT BIT		
        RSEG	BIT_SEG
B_VAR:	DBIT	1
				
;READ ONLY VARIABLES FOR CODE SPACE	
        CCONST SEGMENT CODE
        RSEG	CCONST
;ASCII coded character vector
CCONST_TEMPLATE_TEXT:	DB      "Hello World!",0

;STACK SEGMENT
        ?STACK SEGMENT IDATA
        RSEG    ?STACK
        DS      20 ;Reserve 20 bytes of space for the stack

;START OF PROGRAM
        

        PUBLIC ?C_START
        PROGRAM SEGMENT CODE
        RSEG PROGRAM          
P_USER_PROGRAM_START:
?C_START:
        USING   0
        MOV     SP,#?STACK-1


        SJMP	$


;INTERRUPT HANDLING GOES HERE
;Each interrupt routine gets a unique code segment

//EXTERNAL 0
        CSEG    AT      03H
        LJMP    IRQ_VECT_EXTERNAL_0
        IRQ_EXTERNAL_0 SEGMENT CODE
        RSEG    IRQ_EXTERNAL_0       
IRQ_VECT_EXTERNAL_0:

        RETI ;note, RETI is used instead of RET


;TIMER 0
        CSEG    AT      0BH
        LJMP    IRQ_VECT_TIMER_0_OVERFLOW
        IRQ_TIMER_0 SEGMENT CODE
        RSEG    IRQ_TIMER_0    
IRQ_VECT_TIMER_0_OVERFLOW:

        RETI


;EXTERNAL 1
        CSEG    AT      13H
        LJMP    IRQ_VECT_EXTERNAL_1
        IRQ_EXTERNAL_1 SEGMENT CODE
        RSEG    IRQ_EXTERNAL_1    
IRQ_VECT_EXTERNAL_1:

        RETI


;TIMER 1
        CSEG    AT      1BH
        LJMP    IRQ_VECT_TIMER_1_OVERFLOW
        IRQ_TIMER_1 SEGMENT CODE
        RSEG    IRQ_TIMER_1       
IRQ_VECT_TIMER_1_OVERFLOW:

        RETI


;SERIAL
        CSEG    AT      23H
        LJMP    IRQ_VECT_SERIAL_0_REC_TRANS
        IRQ_SERIAL SEGMENT CODE
        RSEG    IRQ_SERIAL        
IRQ_VECT_SERIAL_0_REC_TRANS:
        JNB RI,IRQ_SERIAL_0_TRANSMIT	
IRQ_SERIAL_0_RECEIVE:
        CLR RI

        JNB TI,IRQ_SERIAL_0_GENERIC
IRQ_SERIAL_0_TRANSMIT:
        CLR TI

IRQ_SERIAL_0_GENERIC:

        RETI


        SUBROUTINES SEGMENT CODE
        RSEG    SUBROUTINES
;SUBROUTINES GO HERE

S_NOP:  NOP
        RET

END 
